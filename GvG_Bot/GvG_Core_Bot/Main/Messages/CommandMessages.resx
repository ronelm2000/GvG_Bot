<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CancelGameDesc" xml:space="preserve">
    <value>Cancels the current game. You cannot cancel the game though if it hasn't even started or has finished.</value>
  </data>
  <data name="DieDesc" xml:space="preserve">
    <value>Closes the server (and automatically cancels all games in the server.)</value>
  </data>
  <data name="DisplayMapDesc" xml:space="preserve">
    <value>Displays a summary of the map, dependent on where you post this particular message. Civilians for example, only see public information (like reported poisoned tiles.) Gaia / Guardian / Occult Club recieves where each member would patrol, as well as information they know. (eg. where each member has supposedly patrolled, for OC, the location of Kagari in the map.) If you post it on PM to Kagari, you will see your Club info, as well as other personal info. (eg. for Lucia, you know where you poisoned your tiles, regardless of public info; for Kagari, you know the number of Fond Memories you have.) PS: Kagari will be assigned a tile to patrol if he/she hasn't patrolled yet only a the end of the Idle Phase.</value>
  </data>
  <data name="DisplayMapDesc_TileSummary" xml:space="preserve">
    <value>Optional. If you indicate a specific tile, you will know more about that tile, including: status of that tile, and reported sightings.</value>
  </data>
  <data name="HelpDesc" xml:space="preserve">
    <value>Shows a list with all the commands. (Prefix is %)</value>
  </data>
  <data name="HelpDesc_SearchSummary" xml:space="preserve">
    <value>Optional. Applies a search filter for either the content or the alias used. If you specify exactly a specific module, it will display all commands of that module.</value>
  </data>
  <data name="JoinDesc" xml:space="preserve">
    <value>Joins a faction (OC / Gaia / Guardian). You cannot join if you're on a faction.</value>
  </data>
  <data name="MovementDesc" xml:space="preserve">
    <value>This module contains all generic movements.</value>
  </data>
  <data name="PatrolDesc" xml:space="preserve">
    <value>Used during the Idle Phase. You will patrol a specified area, example 5x4 (starting from the top-left-most tile, five tiles right, then four tiles down.) You can change your patrol command until the end of the Idle Phase. Insert commas between the positions to perform a multi-patrol with relevant characters (like Chihaya &amp; Sakuya). Patrol prioritizes a PM to Kagari, and if you had PM'd Kagari within the Phase, it will ignore all other patrol commands in the corresponding public channels. (Useful for bluffing / faking out roles.)</value>
  </data>
  <data name="PatrolDesc_RemainderSummary" xml:space="preserve">
    <value>Indicates the patrol string. The format is XxY where X is from the left-most-tile going right, and Y is from the top-most tile going down. Add a comma for multiple patrol tiles. eg.: 1x1,2x2,3x3</value>
  </data>
  <data name="PatrolDesc_ServerSummary" xml:space="preserve">
    <value>Optional. Only relevant if you are participating in multiple games (off the same bot). Indicates what server you're referring to. (eg. if you are playing a game in both the RIM server and a similar server, you have to indicate rewrite_ignis_memoria if you need to perform a patrol in that server.</value>
  </data>
  <data name="QuitDesc" xml:space="preserve">
    <value>Lets you quit your current faction, if any.</value>
  </data>
  <data name="StatusDesc" xml:space="preserve">
    <value>Shows the current status of the game; shows more if you're the Server Owner, or Bot Owner.</value>
  </data>
</root>